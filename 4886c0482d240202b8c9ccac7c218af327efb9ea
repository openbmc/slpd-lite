{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "acda5374_cd0eb7a2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1000452
      },
      "writtenOn": "2024-05-28T15:29:26Z",
      "side": 1,
      "message": "No additional comments",
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6e1bf21_800f7e09",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2024-05-28T08:11:22Z",
      "side": 1,
      "message": "we don\u0027t need to put this here, Suggestion is to print the RC here.\nhttps://github.com/openbmc/slpd-lite/blob/99f391bafe6ecb91ea46515808431f185ceb0a32/main.cpp#L53",
      "range": {
        "startLine": 387,
        "startChar": 1,
        "endLine": 391,
        "endChar": 5
      },
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2d564781_2739e6c3",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 391,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-28T18:58:47Z",
      "side": 1,
      "message": "I\u0027m not sure why it matters? Lets keep it in here in case some other code ends up calling this function.",
      "parentUuid": "a6e1bf21_800f7e09",
      "range": {
        "startLine": 387,
        "startChar": 1,
        "endLine": 391,
        "endChar": 5
      },
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "154cd187_23212407",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 392,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2024-05-28T08:11:22Z",
      "side": 1,
      "message": "Can we also put up the error response format here?\n```      0                   1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |        Service Location header (function \u003d SrvRply \u003d 2)       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |        Error Code             |        URL Entry count        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |       \u003cURL Entry 1\u003e          ...       \u003cURL Entry N\u003e          \\\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+```",
      "range": {
        "startLine": 392,
        "startChar": 2,
        "endLine": 392,
        "endChar": 5
      },
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4f944b77_98d67e99",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 392,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-28T18:58:47Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "154cd187_23212407",
      "range": {
        "startLine": 392,
        "startChar": 2,
        "endLine": 392,
        "endChar": 5
      },
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3ae33ebd_1b8076a0",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1000022
      },
      "writtenOn": "2024-05-28T08:14:37Z",
      "side": 1,
      "message": "We can not just pass all 0, How the caller knows that this error is for which request.",
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "63089f18_2a61f2cd",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-28T13:48:11Z",
      "side": 1,
      "message": "Yeah, it\u0027s a tough one. Do we try to at least send something back or nothing? It looks like openslp just doesn\u0027t return anything on invalid headers. Would you prefer that? I think the main rule should be that we don\u0027t try and use the invalid header from the caller, that has too many attack vectors and it would be a lot of code to try and mark which parts of the input header were \"valid\". How much time and effort to we spend on responding to an invalid packet from the caller?",
      "parentUuid": "3ae33ebd_1b8076a0",
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6e1f3794_642e5cb9",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1000235
      },
      "writtenOn": "2024-05-28T15:56:58Z",
      "side": 1,
      "message": "It seems to me any user agent will want better error handling.\n\nRFC2608, Section 7 (\"Errors\"):\n\u003e If the Error Code in a SLP reply message is nonzero, the rest of the\n\u003e message MAY be truncated.  No data is necessarily transmitted or\n\u003e should be expected after the header and the error code....\n\nThe problem we are discussing is because the Error Code comes after the header whose size itself may be the reason for the error.  The Header is complex and has variable size Extensions and variable size Language Tag.\n\nWhen the request header is in error, is a solution to reconstruct it?  The essential request header fields seem to be version, Function ID, XID, Language Tag, and of course the Length.  Can we very carefully copy these into a new reply?\n1. Allocate a reply message.\n2. Fill the reply with all zeroes.\n3. Copy specific portions of the request header into the reply: Version, Function ID (incremented to become the reply?), omit any extension offsets (so they are zero), XID.  In case the request was less than 14 bytes, only copy data that was provided.\n4. Copy the Language Tag \u0026 its Length (truncated to perhaps 32 bytes -- big enough to handle any 2\u00263 letter languages codes, including Klingon).  Truncation is in the spirit of the RFC.\n5. Then add the Error Code and set the Length.\n\nThis seems complex.  Does anyone foresee any complications which could lead to additional security vulnerabilities?",
      "parentUuid": "63089f18_2a61f2cd",
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "21831fd4_4ce411f8",
        "filename": "slp_message_handler.cpp",
        "patchSetId": 3
      },
      "lineNbr": 396,
      "author": {
        "id": 1000004
      },
      "writtenOn": "2024-05-28T18:58:47Z",
      "side": 1,
      "message": "ok, feels like there\u0027s a general desire to have a better response here. I can at least copy in the \"safe\" stuff but I think keeping language tag at 0 is best.",
      "parentUuid": "6e1f3794_642e5cb9",
      "revId": "4886c0482d240202b8c9ccac7c218af327efb9ea",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}